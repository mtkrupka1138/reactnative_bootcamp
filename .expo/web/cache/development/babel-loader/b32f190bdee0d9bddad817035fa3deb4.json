{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as ActionTypes from \"./ActionTypes\";\nexport var comments = function comments() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    errMess: null,\n    comments: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ActionTypes.ADD_COMMENTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        errMess: null,\n        comments: action.payload\n      });\n\n    case ActionTypes.COMMENTS_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        errMess: action.payload\n      });\n\n    case ActionTypes.ADD_COMMENT:\n      var comment = action.payload;\n      comment.id = state.comments.length;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        comments: state.comments.concat(comment)\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/MTKrupka/Desktop/NucampFolder/4-React-Native/React-Native.nosync/nucampsite/redux/comments.js"],"names":["ActionTypes","comments","state","errMess","action","type","ADD_COMMENTS","payload","COMMENTS_FAILED","ADD_COMMENT","comment","id","length","concat"],"mappings":";;;;;;AAAA,OAAO,KAAKA,WAAZ;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAoD;AAAA,MAAnDC,KAAmD,uEAA3C;AAAEC,IAAAA,OAAO,EAAE,IAAX;AAAiBF,IAAAA,QAAQ,EAAE;AAA3B,GAA2C;AAAA,MAAXG,MAAW;;AACxE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,WAAW,CAACM,YAAjB;AACI,6CAAWJ,KAAX;AAAkBC,QAAAA,OAAO,EAAE,IAA3B;AAAiCF,QAAAA,QAAQ,EAAEG,MAAM,CAACG;AAAlD;;AAEJ,SAAKP,WAAW,CAACQ,eAAjB;AACI,6CAAWN,KAAX;AAAkBC,QAAAA,OAAO,EAAEC,MAAM,CAACG;AAAlC;;AAEJ,SAAKP,WAAW,CAACS,WAAjB;AACI,UAAMC,OAAO,GAAGN,MAAM,CAACG,OAAvB;AACAG,MAAAA,OAAO,CAACC,EAAR,GAAaT,KAAK,CAACD,QAAN,CAAeW,MAA5B;AACA,6CAAWV,KAAX;AAAkBD,QAAAA,QAAQ,EAAEC,KAAK,CAACD,QAAN,CAAeY,MAAf,CAAsBH,OAAtB;AAA5B;;AAEJ;AACI,aAAOR,KAAP;AAbR;AAeH,CAhBM","sourcesContent":["import * as ActionTypes from './ActionTypes';\n\nexport const comments = (state = { errMess: null, comments: []}, action) => {\n    switch (action.type) {\n        case ActionTypes.ADD_COMMENTS:\n            return {...state, errMess: null, comments: action.payload};\n\n        case ActionTypes.COMMENTS_FAILED:\n            return {...state, errMess: action.payload};\n        \n        case ActionTypes.ADD_COMMENT:\n            const comment = action.payload;\n            comment.id = state.comments.length;\n            return {...state, comments: state.comments.concat(comment)};\n\n        default:\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}